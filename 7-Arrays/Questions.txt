/**
* Operations in Arrays
* Create
* Input
* Output
* Update
*/

/**
* Passing Arrays as an Argument to the Function
* --- We always pass arrays " by referance"
*/

/***
* Linear Search
* ----- Find the "index" of element in a given array
*/

/**
* Largest Number
* ---- Find the "largest" number in a given array
* Smallest Number
* ---- Find the "smallest" number in a given array
*/

/**
* Binary Search
* ---- prerequisite - Sorted Array
* Time Complexity : O (log n)
*/

/**
* Reverse An Array
*/

/**
* Pairs in an Array
* For ex.
* int arr[] = {2,4,6,8};
* //// below one we are finding all possible pairs of the given array
* (2,4) (2,6) (2,8) (2,10)
* (4,6) (4,8) (4,10)
* (6,8) (6,10)
* (8,10)
* 
* //// Here we are using nested loops
* 
* Formula For Calculating total no of pairs in an array
* total pairs = n(n-1)/2; where n = no of elements in an array
* Time Complexity: O(n^2)
*/

/**
* Print Subarrays
* ---- a "continuous" part of an array
* 
* For ex.
* int arr[] = {2,4,6,8,10}
* 2: {2},{2,4}, {2,4,6}, {2,4,6}, {2,4,6,10}
* 4: {4},{4,6}, {4,6,8}, {4,6,8,10}
* 8: {8},{8,10}
* 10:{10}
* 
* //// Nested Loops
* Time Complexity: O(n^3)
*/

/**
* Max Subarray Sum ( Brute Force )
* 
* For Ex.
* int arr[] = {1,-2,6,-1};
* Sub Arrays are:
* {1} {1,-2} {1,-2,6} {1,-2,6,-1, 3}
* {-2} {-2,6} {-2,6} {-2,6,-1, 3}
* {6} {6,-1, 3}
* {-1, 3}
* {3}
* 
* Time Complexity: O(n^3)
* Output: 6
*/

/**
* Max Sub Array Sum
* --- Prefix Sum Array Approach ( More Optimized Approach )
* Prefix Array Formula: prefix[i-1] + arr[i]
* Formula : prefix[end] - prefix[start-1]
* 
* Time Complexity : O(n^2)
*/

/**
* Max Subarray Sum
* ---- Kadane's Algorithm
* Time Complexity: O(n)
*/

/**
* Trapping Rain water ( Auxillary Arrays left Max & right Max )
* Given a non negative integers representing an elevetion map where the width
* of each bar is 1, compute how much water it can trap after raining
* define
* --- array height
* --- overalltrappedWaterSum = 0;
* create
* --- Auxillary Arrays left Max -->> Math.max(height[i], leftMax[i-1]) -->> 0
* to n
* ----Auxillary Array right Max --->> Math.max(height[i], rightMax[i+1]) -->>
* n-2 to 0
* Loop
* --- calculate water level -->> Math.min(leftmax[i], rightMax[i])
* ---- calculate trapped water for each bar -->> Water Level - height[i]
* ---- calculate overalltrappedWaterSum += trapped water for each bar
* return overalltrappedWaterSum

int heightArr[] = { 4, 2, 0, 6, 3, 2, 5 };
*/

/**
* Best Time To Buy & Sell Stock
* you are given an array of prices where prices[i] is the prise of agiven
* staock on the ith day. You want to maximise your profit by choosing a single
* day to buy one stock & chossing a diffrent day in the future to sell that
* stock. Return Maximum profit you can achieve from this transaction. If you
* can not achieve any profit, returnn 0.
* 
* Time Complexity: O(n)

`int prices[] = { 7, 1, 5, 3, 6, 4 };
*/