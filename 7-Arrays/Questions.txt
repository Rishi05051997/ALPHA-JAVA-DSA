/**
* Operations in Arrays
* Create
* Input
* Output
* Update
*/

/**
* Passing Arrays as an Argument to the Function
* --- We always pass arrays " by referance"
*/

/***
* Linear Search
* ----- Find the "index" of element in a given array
*/

/**
* Largest Number
* ---- Find the "largest" number in a given array
* Smallest Number
* ---- Find the "smallest" number in a given array
*/

/**
* Binary Search
* ---- prerequisite - Sorted Array
* Time Complexity : O (log n)
*/

/**
* Reverse An Array
*/

/**
* Pairs in an Array
* For ex.
* int arr[] = {2,4,6,8};
* //// below one we are finding all possible pairs of the given array
* (2,4) (2,6) (2,8) (2,10)
* (4,6) (4,8) (4,10)
* (6,8) (6,10)
* (8,10)
* 
* //// Here we are using nested loops
* 
* Formula For Calculating total no of pairs in an array
* total pairs = n(n-1)/2; where n = no of elements in an array
* Time Complexity: O(n^2)
*/

/**
* Print Subarrays
* ---- a "continuous" part of an array
* 
* For ex.
* int arr[] = {2,4,6,8,10}
* 2: {2},{2,4}, {2,4,6}, {2,4,6}, {2,4,6,10}
* 4: {4},{4,6}, {4,6,8}, {4,6,8,10}
* 8: {8},{8,10}
* 10:{10}
* 
* //// Nested Loops
* Time Complexity: O(n^2)
*/